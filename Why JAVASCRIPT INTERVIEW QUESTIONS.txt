
Q1- why javascript is single threaded?

Javascript is single threaded because it only have one call stack. 
However Javascript can also be non-blocking i.e will not execute line by line in some situations.


Q2- Differnce between arrow functions and regular functions?

1- Hoisting does'nt take place in arrow functions(fun fact: they are anoymous functions)
   whereas in regular functions hoisting takes place i.e calling function before
   deceleration.
2- Arrow functions does not have .this
3- In arrow functions we cannot access aruguments.

Note: Fun fact setTimeout function are arrow funtions because settimeout dont require names


Q3-When to use regular functions?
We should use regular functions over arrow functions when we require hoisting


Q4- what is React.memo?

React.memo will cause React to skip rendering a component if its props have not changed.


Q5- Why react is very fast?

React is very fast due to virtual DOM. React first checks in virtual DOM which objects have changed
and only update those in the real DOM. And than changes on the screen occurs due to the changes on the real DOM


Q6- what is useMemo?

useMemo only re-renders when its dependcy has changed. 


Q7- What is a useCallBack hook?

useCallBack hook returns a memoized function callback which renders only when dependency passed to the useCallBack
changes. Second answer is:
One reason to use useCallback is to prevent a component from re-rendering unless its props have changed.


Q8- What is similarity is useMemo and useCallBack?

The similarity is that both increase performance by comparing values to previous and rendering only if value changes. They keep
cache i.e increasing size this is the reason they should only be used when needed. As in one condition they increase performance
however with a cost of increasing app size


Q9- What is the difference between useMemo and React.memo?

React.memo is related to component whereas useMemo is related to value.


Q10- Why should we use React.memo, useMemo, useCallback??

We should use them for optimization purposes.


Q11- What is difference between find() and filter() in js?

Filter returns the element in a new array which fulfills the required condition whereas find starts a loop and stops when the first element satisfies
the condition.


Q12- What is difference between splice and slice in js

Slice returns a new array with specific elements selected from an array whereas splice updates the same array.


Q13- Difference between == and ===?

== compares only value whereas === compares both value and data type.


Q14- what is the difference between spread and rest?

The main difference between rest and spread is that rest operator puts rest of some specific values into an array
whereas spread expands iterables(e.g array) into individual elements.


Q15- What is shallow copy and deep copy in JS
 
 Main answer:
A deep copying means that value of the new variable is disconnected from the original variable
while a shallow copy means that some values are still connected to the original variable.

Secondary info:
The difference between deep and shallow copy is that shallow copy copies the reference
whereas deep copy copies the reference and its values and creates a new reference another defination of deep 
copy is that it clones the first element(e.g object) but both clones are located at different positions i.e
if any change occurs in any of the clone than it wont update the other clone.

fun fact: using spread ... to copy an array, we only create a shallow copy. If the array is nested or multi-dimensional, it won't work


Q16- What are three priciples of redux?

1. All state is stored in store.
2. Inorder to update state we emit actions.
3. We write pure reducers to describe state change to happen.


Q17- what is the difference between useEffect and uselayoutEffect?

The difference between useEffect and useLayoutEffect is that useEffect runs after useLayoutEffect also In useEffect,
when a user triggers a render (by updating state or props), React updates the screen, and the useEffect callback function 
runs asynchronously in the background. In useLayoutEffect, the callback function runs synchronously before the screen is updated.


Q18- What are thunk? 

Thunks are functions which are used to delay a functionality. Actions in redux are by default synchronous however to have
a asynchronous action we need to wrap it in a thunk function.