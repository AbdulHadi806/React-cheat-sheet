
Q1- why javascript is single threaded?

Javascript is single threaded because it only have one call stack. 
However Javascript can also be non-blocking i.e will not execute line by line in some situations.


Q2- Differnce between arrow functions and regular functions?

1- Hoisting does'nt take place in arrow functions(fun fact: they are anoymous functions)
 whereas in regular functions hoisting takes place i.e calling function before
deceleration.
2- Arrow functions does not have .this
3- In arrow functions we cannot access aruguments.

Note: Fun fact setTimeout function are arrow funtions because settimeout dont require names


Q3-When to use regular functions?
We should use regular functions over arrow functions when we require hoisting


Q4- what is use.memo?

memo will cause React to skip rendering a component if its props have not changed.


Q5- Why react is very fast?

React is very fast due to virtual DOM. React first checks in virtual DOM which objects have changed
and only update those in the real DOM. And than changes on the screen occurs due to the changes on the real DOM


Q6- what is useMemo?

useMemo only re-renders when its dependcy has changed. 


Q7- What is a useCallBack hook?

useCallBack hook returns a memoized function callback which renders only when dependency passed to the useCallBack
changes. Second answer is:
One reason to use useCallback is to prevent a component from re-rendering unless its props have changed.


Q8- What is similarity is useMemo and useCallBack?

The similarity is that both increase performance by comparing values to previous and rendering only if value changes. They keep
cache i.e increasing size this is the reason they should only be used when needed. As in one condition they increase performance
however with a cost of increasing app size


Q9- What is the difference between useMemo and React.memo?

React.memo is related to component whereas useMemo is related to value.


Q10- Why should we use React.memo, useMemo, useCallback??

We should use them for optimization purposes.

